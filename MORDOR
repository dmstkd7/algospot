//#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


const int bigNum = 987654321;


struct RMQ{
	int n;
	vector<int> rangeMin;
	RMQ(const vector<int>& array){
		n = array.size();
		rangeMin.resize(n * 4);
		init(array, 0, n - 1, 1);
	}

	int init(const vector<int>& array, int left, int right, int node){
		if (left == right)
			return rangeMin[node] = array[left];

		int mid = (left + right) / 2;
		int leftMin = init(array, left, mid, node * 2);
		int rightMin = init(array, mid + 1, right, node * 2 + 1);
		return rangeMin[node] = min(leftMin, rightMin);
	}

	int query(int left, int right, int node, int nodeLeft, int nodeRight){
		if (right < nodeLeft || nodeRight < left) return bigNum;
		if (left <= nodeLeft && nodeRight <= right)
			return rangeMin[node];
		int mid = (nodeLeft + nodeRight) / 2;
		return min(query(left, right, node * 2, nodeLeft, mid), query(left, right, node * 2 + 1, mid + 1, nodeRight));

	}

	int query(int left, int right){
		return query(left, right, 1, 0, n - 1);
	}

};

int main(void)
{
	int Test_Case;
	int N;
	int Q;
	int a, b;
	int temp;		
	int result;
	vector<int> h_max;
	vector<int> h_min;

	

	scanf("%d", &Test_Case);
	for (int i = 1; i <= Test_Case; i++)
	{
		scanf("%d%d", &N, &Q);
		for (int i = 0; i < N; i++){
			scanf("%d", &temp);
			h_max.push_back(temp*(-1));
			h_min.push_back(temp);
		}
		struct RMQ R1(h_max);			//최대를 구하기 위한 RMQ
		struct RMQ R2(h_min);			//최소를 구하기 위한 RMQ

		for (int i = 0; i < Q; i++){
			scanf("%d%d", &a, &b);
			result = R1.query(a, b) + R2.query(a, b);
			//printf("%d%d\n", R1.query(a, b), R2.query(a, b));
			printf("%d\n", -result);
		}
		
		h_max.clear();
		h_min.clear();
	}
	


	return 0;
}
